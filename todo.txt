Models:
  * optimize/scale network-model-python
    - try to improve graph algos
    - confirm correct usage
    - scale out to run different profiles on on-demand azure instances 50-100 parallel profiles

Platform:
    - Mongo installation and integration
    - Flask cache with memcached or redis on azure, simple local

Org:
    - intro document for db new joiners
    - db representatives to join weekly call

Compartmental model:
    - report page optimize

Misc:
    - see todo.txt in model-server

) optimize report page / remove request timeout / move expensive tables to result compute stage
) console info for cached data
) model run page run queue ux improvements:
  * progress
  * nicer table
  * no double info for same key
) camp_params.csv remove computed parameters from csv to code
) move R code that generates params to python
) setup mongo + impl parameter store and model result store
) better info page in model run in webapp
) add profile customization, convert to table form
) TODO: add save csv specific to model
) #TODO: make specific to model
) add flask cache ideally using azure infra + local
) github PR model
) add azure authentication
) convert run model page to use form
) add validation / better ux in profile change page
) improve performance of    report = generate_csv(sols_raw, p, input_type='raw') to remove need of saving dataframe


B) move camp params generator to python (now in notebook)
B) parameter generator to populate into Mongo

*) cleanup cm.initialise_parameters.py


Completed/in progress:


) add more complex charts to webapp
) cleanup report page
) add scenario description
) clean model cache
abstract params
abstract models a bit
cleanup data input / profile
parallel model exec with dask
azure integration
console runner
webapp

webapp run queue
hash for params
*param change
